{"version":3,"sources":["api/gql.ts","api/gqlClient.ts","store/entity.ts","store/stream.ts","components/MapBackground.tsx","components/MapEntity.tsx","components/MapTelegraph.tsx","components/MapView.tsx","components/Map.tsx","components/PaddedCard.tsx","components/TwoColumnTable.tsx","components/StreamDetails.tsx","components/InlineDiv.tsx","components/EntityListItem.tsx","components/EntityList.tsx","components/ResourceValue.tsx","components/Summary.tsx","components/Tabs.jsx","components/AdditionalInfo.tsx","components/Details.tsx","components/Sidebar.tsx","components/App.tsx","components/LoadingApp.tsx","serviceWorker.js","index.tsx"],"names":["gql","_temp","Object","classCallCheck","this","classJobFragment","_templateObject","resourcesFragment","_templateObject2","locationFragment","_templateObject3","actionFragment","_templateObject4","statusFragment","_templateObject5","castingInfoFragment","_templateObject6","placeFragment","_templateObject7","enmityFragment","_templateObject8","entityFragment","_templateObject9","streamFragment","_templateObject10","streamSubscription","_templateObject11","entitySubscription","_templateObject12","streamQuery","_templateObject13","listStreamsQuery","_templateObject14","hookMutation","_templateObject15","errHandlerLink","onError","_ref","graphQLErrors","networkError","map","_ref2","message","locations","path","console","log","concat","executeOperation","httpLink","operation","Promise","resolve","reject","makePromise","execute","then","result","data","errors","catch","error","GQLClient","apiURL","apiToken","_this","wsLink","listStreams","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","query","sent","abrupt","streams","stop","getStream","_ref4","_callee2","streamID","variables","_context2","stream","_x","apply","arguments","subscribeToStreamEvents","handleStreamEvent","subscribe","subscriptionData","streamEvent","_streamEvent$type","type","__typename","eventData","objectWithoutProperties","subscribeToEntityEvents","handleEntityEvent","entityEvent","entityID","_entityEvent$type","httpOpts","headers","Authorization","wsConnectionParams","authorization","undefined","ApolloLink","from","HttpLink","objectSpread","uri","WebSocketLink","replace","options","reconnect","connectionParams","toHex","id","toString","slice","Interpolation","p0","p1","startTime","t0","t1","duration","lastUpdated","t","lerpFactor","x","y","z","orientation","Entity","ent","target","index","name","bNPCInfo","ownerID","isNPC","isEnemy","isPet","rawSpawnData","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","interpBufffer","_descriptor10","targetID","level","lastAction","castingInfo","assign","classJob","resources","location","interpLocation","JSON","parse","rawSpawnJSONData","statuses","forEach","s","idx","typename","action","status","locationInterpolation","length","push","performance","now","time","interpolation","shift","pt","_this$interpLocation","xi","yi","zi","_this$location","dx","dy","dz","Math","sqrt","hasTarget","realName","hexTargetID","_this$castingInfo","actionName","actionID","info","targetString","size","observable","computed","streamStoreDefaultProps","streamStore","store_stream","gqlClient","pluginParams","getActiveStreamID","serverID","characterID","place","entities","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","done","value","set","window","requestAnimationFrame","animationFrame","targetEnt","get","castingTargetEnt","loading","_this2","selectedMapIndex","_this3","setEntities","removeEntity","addEntity","entity","currentCharacter","delete","_this4","clear","selectedEntityID","optionName","toggle","hexID","has","ents","sort","b","maps","key","SizeFactor","OffsetX","OffsetY","PlaceName","PlaceNameSub","TerritoryType","mapID","territoryID","Map","followSelection","_this5","MapBackground","mapProps","url","scaleFactor","texture","PIXI","possibleConstructorReturn","getPrototypeOf","call","anchor","height","width","position","destroy","children","coneCanvas","canvas","document","createElement","ctx","getContext","beginPath","moveTo","arc","PI","lineTo","gradient","createLinearGradient","addColorStop","fillStyle","fill","selectIndicatorCanvas","lineWidth","strokeStyle","stroke","entityCircleCanvas","lineCap","globalAlpha","createCone","cone","createSelectorIndicator","marker","MapEntity","telegraphUpdated","targetObserverDispose","locationObserverDispose","interpLocationObserverDispose","castingObserverDispose","baseEntity","selector","locationUpdated","_this$baseEntity$loca","rotation","interpLocationUpdated","_this$baseEntity$inte","targetUpdated","color","Colors","RED3","VIOLET3","FOREST3","COBALT3","tint","parseInt","substring","select","addChild","unselect","removeChild","radius","interactive","interactiveChildren","cursor","observe","knownCasts","13061","13062","13063","13103","13104","13105","13059","13060","13106","13107","13108","knownFans","12898","12899","12900","12901","12904","12905","Telegraph","castingEntity","renderer","telegraphTexture","_castingEntity$castin","castType","effectRange","xAxisModifier","omen","additionalRange","graphics","beginFill","lineStyle","telegraphType","drawRect","angle","match","exec","Number","extractAngle","radAngle","closePath","drawCircle","baseRenderTex","scaleMode","LINEAR","render","COBALT5","VERMILION3","baseTexture","MapView","inject","observer","_canvas","app","viewport","entityContainer","telegraphsContainer","mapContainer","entitySprites","telegraphSprites","mapSprite","entityObserverDispose","mapObserverDispose","selectedEntityObserverDispose","optionsObserverDispose","coordText","fontFamily","fontSize","align","hoverName","resize","parent","view","parentNode","clientWidth","clientHeight","screen","setOverlay","posx","posy","prefix","text","handleEntityChange","change","newValue","sprite","updateTelegraph","props","on","e","currentTarget","setSelectedEntityID","removeTelegraph","dispose","telegraph","MapTelegraph","updateMap","mapInfo","worldHeight","worldWidth","clampZoom","maxWidth","maxHeight","centerX","centerY","moveCenter","leftClamp","rightClamp","topClamp","bottomClamp","clamp","left","top","right","bottom","updateEntitySelection","oldSelection","newSelection","oldID","newID","oldSprite","curSprite","plugins","remove","follow","updateOptions","selectedEntity","antialias","Viewport","interaction","drag","pinch","wheel","decelerate","zoomPercent","stage","addEventListener","currentMap","oldValue","pos","getLocalPosition","react_default","ref","c","Component","defaultProps","MapContainer","styled","div","Map_templateObject","react","MapView_MapView","React","Card","PaddedCard_templateObject","DARK_GRAY2","dayjs","extend","LocalizedFormat","GridBox","TwoColumnTable_templateObject","NameCell","className","Classes","TEXT_MUTED","TEXT_SMALL","TwoColumnTable","entries","infos","slicedToArray","isValidElement","format","TwoColumnTable_NameCell","NotInitializedBox","StreamDetails_templateObject","StreamDetails","_this$props$streamSto2","hexCharacterID","PaddedCard","elevation","Elevation","THREE","nonIdealState","icon","title","description","ServerID","CharacterID","CurrentMap","html","TwoColumnTable_TwoColumnTable","tabs","tab","panel","StreamDetails_MapSelectorPanel","StreamDetails_OptionsPanel","MapSelectorPanel","onChange","setSelectedMapIndex","_this$props$streamSto","htmlSelect","m","i","OptionsPanel","controls","checked","label","setOption","InlineDiv_templateObject","smallClasses","EntityListItem","onClick","onSelect","_this$props","selected","child","InlineDiv","castingSummary","menuItem","active","List","UL","EntityList_templateObject","GRAY1","DARK_GRAY5","EntityListContainer","handleFilter","setState","filter","state","EntityList_EntityList","inputGroup","ROUND","leftIcon","placeholder","EntityList","predicate","entityList","filteredList","includes","_partition","reduce","elem","pass","fail","toConsumableArray","_partition2","npcs","players","menuDivider","EntityListItem_EntityListItem","ResourceRow","ResourceValue_templateObject","ResourceText","ResourceValue_templateObject2","ResourceBar","ResourceValue_templateObject3","ResourceValue","current","max","ratioPct","isNaN","style","PROGRESS_BAR","PROGRESS_NO_ANIMATION","PROGRESS_METER","backgroundColor","Summary","_this$props$entity","Target","Level","HP","ResourceValue_ResourceValue","hp","maxHP","MP","mp","maxMP","ROSE3","TP","tp","GOLD3","X","Y","Z","Î¸","toFixed","Tabs","onChangeTab","handleTabClick","renderTabTitle","_child$props","selectedTabId","tabTitles","tabPanels","getTabChildren","renderTabPanel","TABS","TEXT_LARGE","role","BPTabs","AdditionalInfo","lastActionTab","AdditionalInfo_TabWrapper","infoGetter","castInfoTab","castingDetails","statusEffectsTab","bNPCInfoTab","spawnInfoTab","Tabs_Tabs","TabWrapper","Section","Details_templateObject","NoEntityBox","Details_templateObject2","Details","Summary_Summary","AdditionalInfo_AdditionalInfo","SidePanel","Sidebar_templateObject","Title","H3","Sidebar_templateObject2","Sidebar","StreamDetails_StreamDetails","EntityList_EntityListContainer","Details_Details","AppRoot","App_templateObject","DARK_GRAY3","AppContent","App_templateObject2","App","Map_Map","divider","Sidebar_Sidebar","LoadingApp_templateObject","LoadingApp","LoadingApp_AppRoot","spinner","intent","Boolean","hostname","getPluginParams","waitForInit","initPlugin","params","Main","initialize","LoadingApp_LoadingApp","App_App","ReactDOM","mobx_react_module","src_Main","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51885b9a.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport default new class {\n  classJobFragment = gql`\n    fragment classJob on ClassJob {\n      id\n      name\n      abbreviation\n    }\n  `;\n\n  resourcesFragment = gql`\n    fragment resources on Resources {\n      hp\n      mp\n      tp\n      maxHP\n      maxMP\n      lastTick\n    }\n  `;\n\n  locationFragment = gql`\n    fragment location on Location {\n      x\n      y\n      z\n      orientation\n      lastUpdated\n    }\n  `;\n\n  actionFragment = gql`\n    fragment action on Action {\n      id\n      name\n      targetID\n      useTime\n    }\n  `;\n\n  statusFragment = gql`\n    fragment status on Status {\n      id\n      extra\n      name\n      description\n      startedTime\n      duration\n      actorID\n      lastTick\n    }\n  `;\n\n  castingInfoFragment = gql`\n    fragment castingInfo on CastingInfo {\n      actionID\n      actionName\n      startTime\n      castTime\n      targetID\n      location {\n        ...location\n      }\n\n      castType\n      effectRange\n      xAxisModifier\n      omen\n    }\n  `;\n\n  placeFragment = gql`\n    fragment place on Place {\n      mapID\n      territoryID\n      maps {\n        key\n        id\n        SizeFactor\n        OffsetX\n        OffsetY\n        PlaceName\n        PlaceNameSub\n        TerritoryType\n      }\n    }\n  `;\n\n  enmityFragment = gql`\n    fragment enmity on Enmity {\n      targetHateRanking {\n        actorID\n        hate\n      }\n      nearbyEnemyHate {\n        enemyID\n        hatePercent\n      }\n    }\n  `;\n\n  entityFragment = gql`\n    fragment entity on Entity {\n      id\n      index\n      name\n      targetID\n      ownerID\n      level\n      classJob {\n        ...classJob\n      }\n      isNPC\n      isEnemy\n      isPet\n      bNPCInfo {\n        nameID\n        baseID\n        modelID\n        name\n        size\n        error\n      }\n      resources {\n        ...resources\n      }\n      location {\n        ...location\n      }\n      lastAction {\n        ...action\n      }\n      statuses {\n        ...status\n      }\n      lockonMarker\n      castingInfo {\n        ...castingInfo\n      }\n      rawSpawnJSONData\n    }\n    ${this.classJobFragment}\n    ${this.resourcesFragment}\n    ${this.locationFragment}\n    ${this.actionFragment}\n    ${this.statusFragment}\n    ${this.castingInfoFragment}\n  `;\n\n  streamFragment = gql`\n    fragment stream on Stream {\n      id\n      serverID\n      characterID\n\n      place {\n        ...place\n      }\n      enmity {\n        ...enmity\n      }\n\n      entities {\n        ...entity\n      }\n    }\n    ${this.placeFragment}\n    ${this.enmityFragment}\n    ${this.entityFragment}\n  `;\n\n  streamSubscription = gql`\n    subscription Streams {\n      streamEvent {\n        streamID\n        type {\n          __typename\n          ... on UpdateIDs {\n            serverID\n            characterID\n          }\n          ... on UpdateMap {\n            place {\n              ...place\n            }\n          }\n        }\n      }\n    }\n    ${this.placeFragment}\n  `;\n\n  entitySubscription = gql`\n    subscription Entities {\n      entityEvent {\n        streamID\n        entityID\n        type {\n          __typename\n          ... on AddEntity {\n            entity {\n              ...entity\n            }\n          }\n          ... on RemoveEntity {\n            id\n          }\n          ... on SetEntities {\n            entities {\n              ...entity\n            }\n          }\n          ... on UpdateTarget {\n            targetID\n          }\n          ... on UpdateClass {\n            classJob {\n              ...classJob\n            }\n          }\n          ... on UpdateLastAction {\n            action {\n              ...action\n            }\n          }\n          ... on UpdateCastingInfo {\n            castingInfo {\n              ...castingInfo\n            }\n          }\n          ... on UpsertStatus {\n            index\n            status {\n              ...status\n            }\n          }\n          ... on RemoveStatus {\n            index\n          }\n          ... on UpdateLocation {\n            location {\n              ...location\n            }\n          }\n          ... on UpdateResources {\n            resources {\n              ...resources\n            }\n          }\n          ... on UpdateLockonMarker {\n            lockonMarker\n          }\n        }\n      }\n    }\n    ${this.entityFragment}\n    ${this.actionFragment}\n    ${this.castingInfoFragment}\n    ${this.statusFragment}\n    ${this.locationFragment}\n    ${this.resourcesFragment}\n    ${this.classJobFragment}\n  `;\n\n  streamQuery = gql`\n    query GetStream($streamID: Int!) {\n      stream(streamID: $streamID) {\n        ...stream\n      }\n    }\n    ${this.streamFragment}\n  `;\n\n  listStreamsQuery = gql`\n    query AllStreams {\n      streams {\n        id\n      }\n    }\n  `;\n\n  hookMutation = gql`\n    mutation SendHookData($req: StreamRequest!) {\n      sendStreamRequest(request: $req)\n    }\n  `;\n}()","import gql from './gql';\n\nimport { ApolloLink, execute, makePromise, GraphQLRequest } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { onError } from \"apollo-link-error\";\n\nconst errHandlerLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst executeOperation = (httpLink: ApolloLink, operation: GraphQLRequest) => {\n  // Funnel errors into a single promise rejection\n  return new Promise<{ [key: string]: any }>((resolve, reject) => {\n    makePromise(execute(httpLink, operation))\n      .then((result) => {\n        if (result.data) {\n          resolve(result.data);\n        } else {\n          reject(result.errors);\n        }\n      })\n      .catch((error) => reject(error));\n  })\n};\n\nexport default class GQLClient {\n  private httpLink: ApolloLink;\n  private wsLink: ApolloLink;\n\n  constructor(apiURL: string, apiToken?: string) {\n    let httpOpts = (apiToken) ? {\n      headers: {\n        Authorization: apiToken,\n      }\n    } : {};\n    let wsConnectionParams = (apiToken) ? () => ({\n      authorization: apiToken,\n    }) : undefined;\n\n    this.httpLink = ApolloLink.from([\n      errHandlerLink,\n      new HttpLink({ uri: apiURL, ...httpOpts }),\n    ]);\n    this.wsLink = ApolloLink.from([\n      errHandlerLink,\n      new WebSocketLink({\n        uri: apiURL.replace('http://', 'ws://'),\n        options: {\n          reconnect: true,\n          connectionParams: wsConnectionParams,\n        },\n      }),\n    ]);\n  }\n\n  public listStreams = async () => {\n    const data = await executeOperation(\n      this.httpLink, { query: gql.listStreamsQuery },\n    );\n    return data.streams;\n  }\n\n  public getStream = async (streamID: number) => {\n    const variables = { streamID };\n    const data = await executeOperation(\n      this.httpLink, { query: gql.streamQuery, variables },\n    )\n    return data.stream;\n  }\n\n  public subscribeToStreamEvents = (\n    streamID: number, handleStreamEvent: (type: string, data: any) => void\n  ) =>\n    execute(this.wsLink, { query: gql.streamSubscription })\n      .subscribe({\n        next: ( subscriptionData ) => {\n          if (!subscriptionData.data) { return; }\n          let streamEvent = subscriptionData.data.streamEvent;\n          if (streamEvent.streamID !== streamID) { return; }\n          let { __typename, ...eventData } = streamEvent.type;\n          handleStreamEvent(__typename, eventData);\n        },\n      });\n\n  public subscribeToEntityEvents = (\n    streamID: number, handleEntityEvent: (entityID: number, type: string, data: any) => void\n  ) =>\n    execute(this.wsLink, { query: gql.entitySubscription })\n      .subscribe({\n        next: ( subscriptionData ) => {\n          if (!subscriptionData.data) { return; }\n          let entityEvent = subscriptionData.data.entityEvent;\n          if (entityEvent.streamID !== streamID) { return; }\n\n          let { entityID } = entityEvent;\n          let { __typename, ...eventData } = entityEvent.type;\n          handleEntityEvent(entityID, __typename, eventData);\n        },\n      });\n}","import { observable, action, computed } from 'mobx';\nimport { InspectorOptions } from './stream';\n\nfunction toHex(id: number): string {\n  return `0x${('00000000' + id.toString(16)).slice(-8)}`\n}\n\nclass Interpolation {\n  public p0: Location;\n  public t0: number;\n  public p1: Location;\n  public t1: number;\n\n  private duration: number;\n\n  constructor(p0: Location, p1: Location, startTime: number) {\n    this.p0 = p0;\n    this.p1 = p1;\n    this.t0 = startTime;\n    this.duration = p1.lastUpdated - p0.lastUpdated;\n    this.t1 = this.t0 + this.duration;\n  }\n\n  pt(t: number): Location {\n    if (t <= this.t0) {\n      return this.p0;\n    } else if (t >= this.t1) {\n      return this.p1;\n    }\n    const lerpFactor = (t - this.t0)/(this.duration);\n    const xt = this.p0.x + (this.p1.x - this.p0.x) * lerpFactor;\n    const yt = this.p0.y + (this.p1.y - this.p0.y) * lerpFactor;\n    const zt = this.p0.z + (this.p1.z - this.p0.z) * lerpFactor;\n    return {x: xt, y: yt, z: zt, orientation: 0, lastUpdated: 0};\n  }\n}\n\nexport interface BNPCInfo {\n  nameID: number;\n  baseID: number;\n  modelID: number;\n  name: string;\n  size: number;\n  error: string;\n}\n\nexport interface ClassJob {\n  id: number;\n  name: string;\n  abbreviation: string;\n}\nexport interface Location {\n  x: number;\n  y: number;\n  z: number;\n  orientation: number;\n  lastUpdated: number;\n}\n\nexport interface Resources {\n  hp: number;\n  mp: number;\n  tp: number;\n  maxHP: number;\n  maxMP: number;\n  lastTick: number;\n}\n\nexport interface Status {\n  id: number;\n  extra: number;\n  name: string;\n  description: string;\n  startedTime: number;\n  duration: number;\n  actorID: number;\n  lastTick: number;\n}\n\nexport interface Action {\n  id: number;\n  name: string;\n  targetID: number;\n  useTime: number;\n}\n\nexport interface CastingInfo {\n  actionID: number;\n  actionName: string;\n  startTime: number;\n  castTime: number;\n  targetID: number;\n  location: Location;\n\n  castType: number;\n  effectRange: number;\n  xAxisModifier: number;\n  omen: string;\n\n  target?: Entity;\n}\n\nexport interface EntitySpec {\n  id: number;\n  index: number;\n  name: string;\n  targetID: number;\n  ownerID: number;\n  level: number;\n  classJob: ClassJob;\n  isNPC: boolean;\n  isEnemy: boolean;\n  isPet: boolean;\n  bNPCInfo?: BNPCInfo;\n  resources: Resources;\n  location: Location;\n  lastAction?: Action;\n  statuses: Status[];\n  lockonMarker: number;\n  castingInfo?: CastingInfo;\n  rawSpawnJSONData: string;\n}\n\nexport default class Entity {\n  id = 0;\n  index = -1;\n  name = \"\";\n  bNPCInfo?: BNPCInfo;\n  ownerID = 0;\n  isNPC = false;\n  isEnemy = false;\n  isPet = false;\n  rawSpawnData = {};\n\n  @observable targetID = 0;\n  @observable target?: Entity;\n  @observable level = -1;\n  @observable classJob: ClassJob;\n  @observable resources: Resources;\n  @observable location: Location;\n  @observable lastAction?: Action;\n  @observable castingInfo?: CastingInfo;;\n\n  @observable statuses: { [idx: number]: Status } = {};\n\n  interpBufffer: Interpolation[] = [];\n  @observable interpLocation: Location;\n\n  private options: InspectorOptions;\n\n  constructor(ent: EntitySpec, target: Entity | undefined, options: InspectorOptions) {\n    let {\n      id, index, name, bNPCInfo, ownerID, isNPC, isEnemy, isPet,\n      targetID, level, lastAction, castingInfo,\n    } = ent;\n    Object.assign(this, {\n      id, index, name, bNPCInfo, ownerID, isNPC, isEnemy, isPet,\n      targetID, level, lastAction, castingInfo,\n    });\n\n    this.classJob = ent.classJob;\n    this.resources = ent.resources;\n    this.location = ent.location;\n\n    this.target = target;\n    this.interpLocation = ent.location;\n    this.rawSpawnData = JSON.parse(ent.rawSpawnJSONData);\n    ent.statuses.forEach((s, idx) => {\n      if (s) { this.statuses[idx] = s; }\n    });\n    this.options = options;\n  }\n\n  @action handleEntityEvent(typename: string, eventData: any) {\n    switch(typename) {\n    case \"UpdateTarget\":\n      this.targetID = eventData.targetID;\n      this.target = eventData.target;\n      break;\n    case \"UpdateClass\":\n      this.classJob = eventData.classJob;\n      break;\n    case \"UpdateLastAction\":\n      this.lastAction = eventData.action;\n      break;\n    case \"UpdateCastingInfo\":\n      this.castingInfo = eventData.castingInfo;\n      break;\n    case \"UpsertStatus\":\n      this.statuses[eventData.index] = eventData.status;\n      break;\n    case \"RemoveStatus\":\n      delete this.statuses[eventData.index];\n      break;\n    case \"UpdateLocation\":\n      let p0 = this.location;\n      this.location = eventData.location;\n      if (this.options.locationInterpolation) {\n        if (this.interpBufffer.length === 0) {\n          p0.lastUpdated = eventData.location.lastUpdated - 350;\n        }\n        this.interpBufffer.push(new Interpolation(p0, eventData.location, performance.now()));\n      }\n      break;\n    case \"UpdateResources\":\n      this.resources = eventData.resources;\n      break;\n    }\n  }\n\n  @action animationFrame(time: number) {\n    if (!this.options.locationInterpolation) {\n      return;\n    }\n    let interpolation: Interpolation | undefined;\n    while(this.interpBufffer.length > 0) {\n      if (time < this.interpBufffer[0].t0) {\n        return;\n      } else if (time > this.interpBufffer[0].t1) {\n        this.interpBufffer.shift();\n      } else {\n        interpolation = this.interpBufffer[0];\n        break;\n      }\n    }\n    if (interpolation) {\n      this.interpLocation = interpolation.pt(time);\n      return;\n    }\n    let {x: xi, y: yi, z: zi} = this.interpLocation;\n    let {x, y, z} = this.location;\n    let [dx, dy, dz] = [(xi-x), (yi-y), (zi-z)];\n    if (Math.sqrt(dx*dx + dy*dy + dz*dz) > 0.1) {\n      this.interpLocation = this.location;\n    }\n  }\n\n  @computed get realName() {\n    if (this.isNPC && this.bNPCInfo) {\n      return this.bNPCInfo.name || this.name;\n    }\n    return this.name;\n  }\n\n  @computed get hexID() {\n    return toHex(this.id);\n  }\n\n  @computed get hasTarget() {\n    return this.targetID !== 0xE0000000 && this.targetID !== 0;\n  }\n\n  @computed get targetString() {\n    if (!this.hasTarget) { return \"\" };\n    let name = (this.target && this.target.realName) || \"Unknown\";\n    return `${name} (${this.hexTargetID})`;\n  }\n\n  @computed get hexTargetID() {\n    return toHex(this.targetID);\n  }\n\n  @computed get castingSummary() {\n    if (!this.castingInfo) { return null; }\n    const { actionName, actionID } = this.castingInfo;\n    return `${actionName} (${actionID})`\n  }\n\n  @computed get castingDetails() {\n    if (!this.castingInfo) { return null; }\n\n    let info: { [key: string]: any } = Object.assign({}, this.castingInfo)\n    let name = (info.target && info.target.realName) || \"Unknown\";\n    info.targetString = `${name} (${toHex(info.targetID)})`;\n    delete info.targetID;\n    delete info.target;\n\n    return info;\n  }\n\n  @computed get radius() {\n    if (this.bNPCInfo && this.bNPCInfo.size > 0) {\n      return this.bNPCInfo.size;\n    }\n    return 0.5;\n  }\n}","import { action, observable, computed } from 'mobx';\nimport GQLClient from '../api/gqlClient';\n\nimport Entity, { EntitySpec } from './entity';\n\nexport interface StreamStoreProps {\n  streamStore: Stream;\n}\nexport const streamStoreDefaultProps = { streamStore: (null as unknown) as Stream };\n\nexport interface MapInfo {\n  key: number;\n  id: string;\n  SizeFactor: number;\n  OffsetX: number;\n  OffsetY: number;\n  PlaceName: string;\n  PlaceNameSub: string;\n  TerritoryType: string;\n}\n\nexport interface Place {\n  mapID: number;\n  territoryID: number;\n  maps: MapInfo[];\n}\n\nexport interface InspectorOptions {\n  followSelection: boolean;\n  locationInterpolation: boolean;\n}\n\nexport interface PluginParams {\n  apiURL: string;\n  apiToken?: string;\n  streamID?: number;\n}\n\nclass Stream {\n  @observable loading = true;\n\n  gqlClient?: GQLClient;\n  streamID = 0;\n  apiURL = '';\n\n  @observable serverID = 0;\n  @observable characterID = 0;\n\n  @observable place: Place = { mapID: 0, territoryID: 0, maps: [] };\n  @observable entities = new Map<number, Entity>();\n\n  @observable selectedEntityID = 0;\n  @observable selectedMapIndex = 0;\n\n  @observable options: InspectorOptions = {\n    followSelection: true,\n    locationInterpolation: true,\n  };\n\n  @action async initialize(pluginParams: PluginParams) {\n    this.gqlClient = new GQLClient(pluginParams.apiURL, pluginParams.apiToken);\n    const streamID = this.streamID = await this.getActiveStreamID(pluginParams);\n    this.apiURL = pluginParams.apiURL;\n    this.subscribeToStreamEvents();\n    this.subscribeToEntityEvents();\n\n    if (!streamID) { return; }\n\n    const stream = await this.gqlClient.getStream(streamID);\n    const { serverID, characterID, place, entities } = stream;\n    this.serverID = serverID;\n    this.characterID = characterID;\n    this.place = place;\n    for (let ent of entities) {\n      this.entities.set(ent.id, new Entity(ent, undefined, this.options));\n    }\n    window.requestAnimationFrame(this.animationFrame);\n\n    this.entities.forEach(ent => {\n      let targetEnt = this.entities.get(ent.targetID);\n      ent.target = targetEnt;\n      if (ent.castingInfo) {\n        let castingTargetEnt = this.entities.get(ent.castingInfo.targetID);\n        ent.castingInfo.target = castingTargetEnt;\n      }\n    });\n\n    this.loading = false;\n  }\n\n  async getActiveStreamID(pluginParams: PluginParams) {\n    if (pluginParams.streamID) {\n      return pluginParams.streamID;\n    } else {\n      const streams = await this.gqlClient!.listStreams();\n      if (streams.length > 0) {\n        return streams[0].id;\n      }\n    }\n    return 0;\n  }\n\n  @action subscribeToStreamEvents() {\n    return this.gqlClient!.subscribeToStreamEvents(\n      this.streamID,\n      action((typename: string, eventData: any) => {\n        if (this.loading) { return; }\n        switch (typename) {\n          case \"UpdateIDs\":\n            this.serverID = eventData.serverID;\n            this.characterID = eventData.characterID;\n            break;\n          case \"UpdateMap\":\n            this.place = eventData.place;\n            this.selectedMapIndex = 0;\n            break;\n        }\n      }),\n    );\n  }\n\n  @action subscribeToEntityEvents() {\n    return this.gqlClient!.subscribeToEntityEvents(\n      this.streamID,\n      action((entityID: number, typename: string, eventData: any) => {\n        if (this.loading) { return; }\n\n        if (typename === \"AddEntity\") {\n          this.addEntity(eventData.entity);\n          return;\n        } else if (typename === \"RemoveEntity\") {\n          this.removeEntity(eventData.id);\n          return;\n        } else if (typename === \"SetEntities\") {\n          this.setEntities(eventData.entities);\n          return;\n        }\n        let ent = this.entities.get(entityID);\n        if (typename === \"UpdateTarget\") {\n          let targetEnt = this.entities.get(eventData.targetID);\n          if (targetEnt) {\n            eventData.target = targetEnt;\n          }\n        }\n        if (typename === \"UpdateCastingInfo\") {\n          if (eventData.castingInfo) {\n            let targetEnt = this.entities.get(eventData.castingInfo.targetID);\n            if (targetEnt) {\n              eventData.castingInfo.target = targetEnt;\n            }\n          }\n        }\n        if (ent) {\n          ent.handleEntityEvent(typename, eventData);\n        }\n      }),\n    );\n  }\n\n  @action addEntity(ent: EntitySpec) {\n    let targetEnt = this.entities.get(ent.targetID);\n    let currentCharacter = new Entity(ent, targetEnt, this.options);\n    this.entities.set(ent.id, currentCharacter);\n  }\n\n  @action removeEntity(id: number) {\n    this.entities.delete(id);\n  }\n\n  @action setEntities(entities: EntitySpec[]) {\n    this.entities.clear();\n    entities.forEach((ent) => {\n      this.addEntity(ent);\n    });\n  }\n\n  @action animationFrame = (time: number) => {\n    if (this.options.locationInterpolation) {\n      this.entities.forEach((ent) => ent.animationFrame(time));\n    }\n    window.requestAnimationFrame(this.animationFrame)\n  }\n\n  @action setSelectedEntityID(id: number) {\n    this.selectedEntityID = id;\n  }\n\n  @action setSelectedMapIndex(idx: number) {\n    this.selectedMapIndex = idx;\n  }\n\n  @action setOption(optionName: 'followSelection' | 'locationInterpolation', toggle: boolean) {\n    this.options[optionName] = toggle;\n  }\n\n  @computed get hexCharacterID() {\n    if (this.currentCharacter) {\n      return this.currentCharacter.hexID;\n    }\n    return '0x00000000';\n  }\n\n  @computed get currentCharacter() {\n    return this.entities.get(this.characterID);\n  }\n\n  @computed get selectedEntity() {\n    if (this.entities.has(this.selectedEntityID)) {\n      return this.entities.get(this.selectedEntityID);\n    } else {\n      return this.currentCharacter;\n    }\n  }\n\n  @computed get entityList() {\n    let ents: Entity[] = [];\n    this.entities.forEach((ent) => ents.push(ent));\n    ents.sort((a, b) => a.index - b.index);\n    return ents;\n  }\n\n\n  @computed get currentMap(): MapInfo {\n    if (this.place && this.place.maps.length > 0) {\n      return this.place.maps[this.selectedMapIndex];\n    }\n\n    return {\n      key: 1,\n      id: \"default/00\",\n      SizeFactor: 100,\n      OffsetX: 0,\n      OffsetY: 0,\n      PlaceName: \"Eorzea\",\n      PlaceNameSub: \"\",\n      TerritoryType: \"\"\n    };\n  }\n}\n\nexport default new Stream();\n","import * as PIXI from 'pixi.js';\n\ninterface MapBackgroundProps {\n  key: number;\n  SizeFactor: number;\n  OffsetX: number;\n  OffsetY: number;\n}\n\nexport default class MapBackground extends PIXI.Sprite {\n  constructor(mapProps: MapBackgroundProps, apiURL: string) {\n    let { key, SizeFactor, OffsetX, OffsetY } = mapProps;\n\n    const url = `${apiURL.replace('query', 'map')}/${key}`;\n    const scaleFactor = SizeFactor / 100;\n    const texture = PIXI.Texture.from(url);\n    super(texture)\n\n    const size = 2048/scaleFactor;\n    this.anchor.x = 0.5;\n    this.anchor.y = 0.5;\n    this.height = size;\n    this.width = size;\n    this.position.x = -OffsetX;\n    this.position.y = -OffsetY;\n  }\n\n  dispose() {\n    this.destroy({children: true});\n  }\n}","import * as PIXI from 'pixi.js';\n\nimport { Colors } from '@blueprintjs/core';\n\nimport { observe } from 'mobx';\n\nimport Entity from '../store/entity';\nimport { InspectorOptions } from '../store/stream';\n\nfunction getColor(entity: Entity) {\n  if (entity.isEnemy && entity.hasTarget) {\n    return Colors.RED3;\n  } else if (entity.isEnemy) {\n    return Colors.VIOLET3;\n  } else if (entity.isNPC) {\n    return Colors.FOREST3;\n  }\n  return Colors.COBALT3;\n}\n\nconst coneCanvas = (() => {\n  var canvas = document.createElement('canvas')\n  canvas.width = 512;\n  canvas.height = 512;\n  var ctx = canvas.getContext('2d')!;\n\n  ctx.beginPath();\n  ctx.moveTo(0, 256);\n  ctx.arc(0, 256, 256, -Math.PI/6, Math.PI/6);\n  ctx.lineTo(0, 256);\n\n  var gradient = ctx.createLinearGradient(0, 0, 230, 0);\n  gradient.addColorStop(0.0, 'rgba(255, 255, 255, 0.6)');\n  gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.4)');\n  gradient.addColorStop(1.0, 'rgba(255, 255, 255, 0)');\n\n  ctx.fillStyle = gradient;\n  ctx.fill();\n  return canvas;\n})();\n\nconst selectIndicatorCanvas = (() => {\n  var canvas = document.createElement('canvas')\n  canvas.width = 512;\n  canvas.height = 512;\n  var ctx = canvas.getContext('2d')!;\n  ctx.arc(256, 256, 200, 0, 2*Math.PI);\n  ctx.lineWidth = 50;\n  ctx.strokeStyle = \"#FF0000\";\n  ctx.stroke();\n  return canvas;\n})();\n\nconst entityCircleCanvas = (() => {\n  var canvas = document.createElement('canvas')\n  canvas.width = 1024;\n  canvas.height = 1024;\n\n  var ctx = canvas.getContext('2d')!;\n\n  ctx.fillStyle = '#FFFFFF';\n  ctx.strokeStyle = '#FFFFFF';\n  ctx.lineCap = 'round';\n\n  ctx.globalAlpha = 0.5;\n  ctx.beginPath();\n  ctx.arc(512, 512, 512, 0, 2*Math.PI);\n  ctx.fill();\n\n  ctx.globalAlpha = 1.0;\n  ctx.lineWidth = 32;\n\n  ctx.beginPath();\n  ctx.arc(512, 512, 512-(ctx.lineWidth/2), 0.25*Math.PI, 0.75*Math.PI);\n  ctx.stroke();\n\n  ctx.beginPath();\n  ctx.arc(512, 512, 512-(ctx.lineWidth/2), 1.25*Math.PI, 1.75*Math.PI);\n  ctx.stroke();\n\n  ctx.lineWidth = 64;\n  ctx.beginPath();\n  ctx.arc(512, 512, 512-(ctx.lineWidth/2), 1.75*Math.PI, 0.25*Math.PI);\n  ctx.stroke();\n\n  ctx.lineWidth = 128;\n  ctx.beginPath();\n  ctx.arc(512, 512, 512-(ctx.lineWidth/2), 1.9*Math.PI, 0.1*Math.PI);\n  ctx.stroke();\n\n  return canvas;\n})();\n\nconst createCone = () => {\n  let cone = new PIXI.Sprite(new PIXI.Texture(new PIXI.BaseTexture(coneCanvas)));\n  cone.height = 100 * 512;\n  cone.width = 100 * 512;\n  cone.anchor.x = 0;\n  cone.anchor.y = 0.5;\n  return cone;\n};\n\nconst createSelectorIndicator = () => {\n  let marker = new PIXI.Sprite(new PIXI.Texture(new PIXI.BaseTexture(selectIndicatorCanvas)));\n  marker.height = 1.7 * 1024;\n  marker.width = 1.7 * 1024;\n  marker.anchor.x = 0.5;\n  marker.anchor.y = 0.5;\n  return marker;\n};\n\nexport default class MapEntity extends PIXI.Sprite {\n  private targetObserverDispose?: () => void;\n  private locationObserverDispose?: () => void;\n  private interpLocationObserverDispose?: () => void;\n  private castingObserverDispose?: () => void;\n\n  private baseEntity: Entity;\n  private options: InspectorOptions;\n\n  private selector?: PIXI.Sprite;\n\n  constructor(\n    entity: Entity,\n    telegraphUpdated: () => void,\n    options: InspectorOptions,\n  ) {\n    super(new PIXI.Texture(new PIXI.BaseTexture(entityCircleCanvas)));\n    this.baseEntity = entity;\n    this.options = options;\n\n    if (entity.index === 0) {\n      this.addChild(createCone());\n    }\n    const radius = this.baseEntity.radius;\n    this.anchor.x = 0.5;\n    this.anchor.y = 0.5;\n    this.height = radius*2;\n    this.width = radius*2;\n\n    this.interactive = true;\n    this.interactiveChildren = false;\n    this.cursor = 'pointer';\n\n    this.targetUpdated();\n    this.locationUpdated();\n    this.interpLocationUpdated();\n    telegraphUpdated();\n\n    this.targetObserverDispose = observe(this.baseEntity, \"target\", this.targetUpdated);\n    this.locationObserverDispose = observe(this.baseEntity, \"location\", this.locationUpdated);\n    this.interpLocationObserverDispose = observe(this.baseEntity, \"interpLocation\", this.interpLocationUpdated);\n    this.castingObserverDispose = observe(this.baseEntity, \"castingInfo\", telegraphUpdated);\n  }\n\n  locationUpdated = () => {\n    let { x, z, orientation } = this.baseEntity.location;\n    if (!this.options.locationInterpolation) {\n      this.position.x = x;\n      this.position.y = z;\n    }\n    this.rotation = -Math.PI/2 - orientation;\n  }\n\n  interpLocationUpdated = () => {\n    if (!this.options.locationInterpolation) {\n      return;\n    }\n    let { x, z } = this.baseEntity.interpLocation;\n    this.position.x = x;\n    this.position.y = z;\n  }\n\n  targetUpdated = () => {\n    const color = getColor(this.baseEntity);\n    this.tint =  parseInt(color.substring(1), 16);\n  }\n\n  select = () => {\n    this.selector = createSelectorIndicator();\n    this.addChild(this.selector);\n  }\n\n  unselect = () => {\n    if (this.selector) {\n      this.removeChild(this.selector);\n      this.selector = undefined;\n    }\n  }\n\n  dispose() {\n    this.destroy({children: true});\n\n    if (this.targetObserverDispose) { this.targetObserverDispose(); }\n    if (this.locationObserverDispose) { this.locationObserverDispose(); }\n    if (this.interpLocationObserverDispose) { this.interpLocationObserverDispose(); }\n    if (this.castingObserverDispose) { this.castingObserverDispose(); }\n  }\n}","import * as PIXI from 'pixi.js';\n\nimport { Colors } from '@blueprintjs/core';\nimport Entity from '../store/entity';\n\nfunction extractAngle(omen: string) {\n  let re = /gl_fan(\\d+)/;\n  let match = re.exec(omen);\n  if (!match || match.length < 2) {\n    return 0;\n  }\n  return Number(match[1]);\n}\n\nconst knownCasts: { [k: number]: number } = {\n  13061: 4,\n  13062: 4,\n  13063: 4,\n  13103: 4,\n  13104: 4,\n  13105: 4,\n  13059: 4,\n  13060: 4,\n  13106: 4,\n  13107: 4,\n  13108: 3,\n};\n\nconst knownFans: { [k: number]: number }= {\n  0x3262: 210,\n  0x3263: 210,\n  0x3264: 210,\n  0x3265: 210,\n  12904: 210,\n  12905: 210,\n  13108: 330,\n};\n\nexport default class Telegraph extends PIXI.Sprite {\n  public telegraphTexture?: PIXI.RenderTexture;\n\n  constructor(castingEntity: Entity, renderer: PIXI.Renderer) {\n    if (!castingEntity.castingInfo) {\n      super();\n      return;\n    }\n\n    let {\n      actionID, castType, effectRange, xAxisModifier, omen, target, location\n    } = castingEntity.castingInfo;\n\n    let additionalRange = 0;\n    if (target) {\n      additionalRange = target.radius;\n    }\n\n    let graphics = new PIXI.Graphics();\n    graphics.beginFill(0xffffff, 0.2);\n    graphics.lineStyle(16, 0xffffff, 1, 0);\n\n    effectRange += additionalRange;\n\n    if (actionID in knownCasts) {\n      castType = knownCasts[actionID];\n    }\n    let telegraphType = \"\";\n    switch (castType) {\n      case 4:\n        telegraphType = \"rectangle\";\n        graphics.drawRect(0, 0, 1024, 1024);\n        break;\n      case 3:\n        let angle = extractAngle(omen)\n        if (actionID in knownFans) {\n          angle = knownFans[actionID];\n        }\n        if (angle === 0) {\n          break;\n        }\n        let radAngle = (angle/180)*Math.PI;\n        telegraphType = \"fan\";\n        graphics.moveTo(512, 512);\n        graphics.arc(512, 512, 512, -radAngle/2, radAngle/2);\n        graphics.closePath();\n        break;\n      case 2:\n      case 5:\n      case 7:\n        telegraphType = \"circle\";\n        graphics.drawCircle(512, 512, 512);\n        graphics.closePath();\n        break;\n    }\n\n    if (telegraphType === \"\") {\n      super();\n      return;\n    }\n\n    const baseRenderTex = new PIXI.BaseRenderTexture({\n      width: 1024,\n      height: 1024,\n      scaleMode: PIXI.SCALE_MODES.LINEAR,\n    });\n\n    const telegraphTexture = new PIXI.RenderTexture(baseRenderTex);\n    renderer.render(graphics, telegraphTexture, false);\n\n    super(telegraphTexture);\n    this.telegraphTexture = telegraphTexture;\n\n    let color = Colors.COBALT5;\n    if (castingEntity.isEnemy) {\n      color = Colors.VERMILION3;\n    }\n    switch(telegraphType) {\n      case \"rectangle\":\n        this.anchor.x = 0.5;\n        this.anchor.y = 0;\n        this.width = xAxisModifier;\n        this.height = effectRange;\n        this.rotation = - location.orientation + Math.PI;\n        break;\n      case \"fan\":\n      case \"circle\":\n        this.anchor.x = 0.5;\n        this.anchor.y = 0.5;\n        this.width = effectRange * 2;\n        this.height = effectRange * 2;\n        this.rotation = - location.orientation - Math.PI/2;\n    }\n\n    this.position.x = location.x;\n    this.position.y = location.z;\n    this.tint =  parseInt(color.substring(1), 16);\n  }\n\n  dispose() {\n    if (this.telegraphTexture) { this.telegraphTexture.destroy(true); }\n    this.destroy({ children: true, texture: true, baseTexture: true });\n  }\n}","import React, { Component } from 'react';\n\nimport * as PIXI from 'pixi.js';\nimport { Viewport } from 'pixi-viewport';\n\nimport { inject, observer } from 'mobx-react';\n\nimport MapBackground from './MapBackground';\nimport MapEntity from './MapEntity';\nimport MapTelegraph from './MapTelegraph';\nimport { observe, IMapDidChange, ObservableMap } from 'mobx';\nimport { StreamStoreProps, streamStoreDefaultProps, MapInfo } from '../store/stream';\nimport Entity from '../store/entity';\nimport Telegraph from './MapTelegraph';\n\n// interface ViewportFixed {\n//   screenHeight: number;\n//   fixHeight()\n// }\n@inject('streamStore')\n@observer\nexport default class MapView extends Component<StreamStoreProps> {\n  static defaultProps = streamStoreDefaultProps;\n\n  private _canvas?: HTMLCanvasElement;\n  private app?: PIXI.Application;\n  private viewport?: Viewport;\n  private entityContainer = new PIXI.Container();\n  private telegraphsContainer = new PIXI.Container();\n  private mapContainer = new PIXI.Container();\n\n  private entitySprites: { [key: number]: MapEntity } = {};\n  private telegraphSprites: { [key: number]: Telegraph } = {};\n  private mapSprite?: MapBackground;\n\n  private entityObserverDispose?: () => void;\n  private mapObserverDispose?: () => void;\n  private selectedEntityObserverDispose?: () => void;\n  private optionsObserverDispose?: () => void;\n\n  private coordText = new PIXI.Text('', {fontFamily : 'Arial', fontSize: 24, fill : 0x000000, align : 'center'});\n  private hoverName?: string;\n\n  componentDidMount() {\n    this.app = new PIXI.Application({\n      width: 100,\n      height: 100,\n      view: this._canvas,\n      antialias: true,\n    });\n\n    this.viewport = new Viewport({\n      interaction: this.app.renderer.plugins.interaction,\n    });\n\n    this.viewport\n      .drag()\n      .pinch()\n      .wheel()\n      .decelerate();\n\n    this.viewport.zoomPercent(8);\n\n    this.app.stage.addChild(this.viewport);\n\n    this.viewport.addChild(this.mapContainer);\n    this.viewport.addChild(this.telegraphsContainer);\n    this.viewport.addChild(this.entityContainer);\n\n    window.addEventListener('resize', this.resize);\n    this.resize();\n\n    this.updateMap(this.props.streamStore.currentMap);\n\n    this.props.streamStore.entities.forEach((entity, key) => {\n      this.addEntity(key, entity);\n      this.updateTelegraph(key, entity);\n    });\n\n    this.entityObserverDispose = observe<number, Entity>(\n      this.props.streamStore.entities as ObservableMap<number, Entity>,\n      this.handleEntityChange,\n    );\n\n    this.mapObserverDispose = observe(\n      this.props.streamStore, \"currentMap\",\n      (change) => this.updateMap(change.newValue),\n    );\n\n    this.selectedEntityObserverDispose = observe(\n      this.props.streamStore, \"selectedEntity\",\n      (change) => this.updateEntitySelection(change.oldValue, change.newValue),\n    );\n    this.updateEntitySelection(undefined, this.props.streamStore.selectedEntity);\n\n    this.optionsObserverDispose = observe(\n      this.props.streamStore.options,\n      (change) => {\n        if (change.type === \"update\") { this.updateOptions(change.name, change.newValue); }\n      },\n    );\n\n    this.coordText.x = 0;\n    this.coordText.y = 0;\n    let moveHandler = (e: any) => {\n      let pos = e.data.getLocalPosition(this.mapContainer);\n      this.setOverlay(this.hoverName || '', pos.x, pos.y);\n    };\n    this.app.stage.interactive = true;\n    this.app.stage.on(\"pointermove\", moveHandler);\n\n    this.app.stage.addChild(this.coordText);\n  }\n\n  resize = () => {\n    if (!this.app || !this.viewport) { return; }\n    const parent = this.app.view.parentNode as HTMLElement;\n    this.app.renderer.resize(parent.clientWidth, parent.clientHeight-4);\n    this.viewport.resize(this.app.screen.width, this.app.screen.height);\n  }\n\n  setOverlay = (name: string, posx: number, posy: number) => {\n    let prefix = '';\n    if (name) {\n      prefix = `${name} `\n    }\n    this.coordText.text = `${prefix}(${posx}, ${posy})`;\n  }\n\n  handleEntityChange = (change: IMapDidChange<number, Entity>) => {\n    if (change.type === \"add\" || change.type === \"update\") {\n      this.addEntity(change.name, change.newValue);\n    } else if (change.type === \"delete\") {\n      this.removeEntity(change.name);\n    }\n  }\n\n  addEntity = (key: number, entity: Entity) => {\n    if (!this.app) { return; }\n    if (key in this.entitySprites) {\n      this.removeEntity(key);\n    }\n    let sprite = this.entitySprites[key] = new MapEntity(\n      entity,\n      () => this.updateTelegraph(key, entity),\n      this.props.streamStore.options,\n    );\n    sprite.on(\"pointerover\", (e: any) => {\n      this.hoverName = e.currentTarget.baseEntity.realName;\n    });\n    sprite.on(\"pointerout\", (e: any) => {\n      if (this.hoverName === e.currentTarget.baseEntity.realName) {\n        this.hoverName = '';\n      }\n    });\n    sprite.on(\"click\", (e: any) => {\n      this.props.streamStore.setSelectedEntityID(e.currentTarget.baseEntity.id);\n    });\n    this.entityContainer.addChild(sprite);\n  }\n\n  removeEntity = (key: number) => {\n    this.removeTelegraph(key);\n    if (key in this.entitySprites) {\n      let sprite = this.entitySprites[key];\n      this.entityContainer.removeChild(sprite);\n      sprite.dispose();\n      delete this.entitySprites[key];\n    }\n  }\n\n  removeTelegraph = (key: number) => {\n    if (key in this.telegraphSprites) {\n      let telegraph = this.telegraphSprites[key];\n      this.telegraphsContainer.removeChild(telegraph);\n      telegraph.dispose();\n      delete this.telegraphSprites[key];\n    }\n  }\n\n  updateTelegraph = (key: number, entity: Entity) => {\n    if (!this.app) { return; }\n\n    this.removeTelegraph(key);\n\n    let sprite = new MapTelegraph(entity, this.app.renderer);\n    if (sprite.telegraphTexture) {\n      this.telegraphSprites[key] = sprite;\n      this.telegraphsContainer.addChild(sprite);\n    }\n  }\n\n  updateMap = (mapInfo: MapInfo) => {\n    if (!this.viewport) { return; }\n\n    if (this.mapSprite) {\n      this.mapContainer.removeChild(this.mapSprite);\n      this.mapSprite.dispose();\n    }\n    this.mapSprite = undefined;\n\n    this.mapSprite = new MapBackground(mapInfo, this.props.streamStore.apiURL);\n\n    this.mapContainer.addChild(this.mapSprite);\n    let height = this.mapSprite.height;\n    let width = this.mapSprite.width;\n    this.viewport.worldHeight = height;\n    this.viewport.worldWidth = width;\n    this.viewport.clampZoom({\n      maxWidth: width,\n      maxHeight: height,\n    });\n\n    let centerX = this.mapSprite.position.x;\n    let centerY = this.mapSprite.position.y;\n    this.viewport.moveCenter(centerX, centerY);\n\n    let leftClamp = centerX - width/2;\n    let rightClamp = centerX + width/2;\n    let topClamp = centerY - height/2;\n    let bottomClamp = centerY + height/2;\n    this.viewport.clamp({\n      left: leftClamp,\n      top: topClamp,\n      right: rightClamp,\n      bottom: bottomClamp,\n    })\n  }\n\n  updateEntitySelection = (oldSelection?: Entity, newSelection?: Entity) => {\n    if (!this.viewport) { return; }\n    let oldID = (oldSelection && oldSelection.id) || 0;\n    let newID = (newSelection && newSelection.id) || 0;\n    let oldSprite = this.entitySprites[oldID];\n    let curSprite = this.entitySprites[newID];\n    this.viewport.plugins.remove('follow');\n    if (oldSprite) {\n      oldSprite.unselect();\n    }\n    if (curSprite) {\n      if (this.props.streamStore.options.followSelection) {\n        this.viewport.follow(curSprite);\n      }\n      curSprite.select();\n    }\n  }\n\n  updateOptions = (optionName: string | number | symbol, newValue: boolean) => {\n    if (!this.viewport) { return; }\n    if (optionName === \"followSelection\") {\n      if (newValue) {\n        let sprite = this.entitySprites[this.props.streamStore.selectedEntity!.id];\n        if (sprite) {\n          this.viewport.follow(sprite);\n        }\n      } else {\n        this.viewport.plugins.remove('follow');\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.entityObserverDispose) { this.entityObserverDispose(); }\n    if (this.mapObserverDispose) { this.mapObserverDispose(); }\n    if (this.selectedEntityObserverDispose) { this.selectedEntityObserverDispose(); }\n    if (this.optionsObserverDispose) { this.optionsObserverDispose(); }\n\n    if (this.app) { this.app.destroy(); }\n  }\n\n  render() {\n    return (\n      <canvas ref={(c) => { if (c) { this._canvas = c; } }} />\n    )\n  }\n}","import * as React from 'react';\nimport styled from 'styled-components';\n\nimport MapView from './MapView';\n\nconst MapContainer = styled.div`\n  flex: 1 0 400px;\n  min-width: 0;\n  position: relative;\n`;\n\nexport default class Map extends React.Component {\n  render() {\n    return (\n      <MapContainer>\n        <MapView />\n      </MapContainer>\n    );\n  }\n}","import { Card, Colors } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nexport default styled(Card)`\n  padding: 20px;\n  margin: 20px;\n  && {\n    background-color: ${Colors.DARK_GRAY2};\n  }\n`;\n\n","import React, { Component } from 'react';\nimport { Classes } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nimport dayjs from 'dayjs';\n\nimport LocalizedFormat from 'dayjs/plugin/localizedFormat'\ndayjs.extend(LocalizedFormat)\n\nconst GridBox = styled.div`\n  display: grid;\n  grid-row-gap: 5px;\n  grid-column-gap: 10px;\n  grid-template-columns: max-content auto;\n  grid-auto-rows: minmax(18px, auto);\n`;\n\nconst NameCell = (props: { children: any }) =>\n  <div className={`${Classes.TEXT_MUTED} ${Classes.TEXT_SMALL}`}>{props.children}</div>\n\n\ninterface TwoColumnTableProps {\n  infos: { [key: string]: any } | Array<{ [key: string]: any }>;\n}\n\nexport default class TwoColumnTable extends Component<TwoColumnTableProps> {\n  render() {\n    let entries: JSX.Element[] = [];\n    Object.entries(this.props.infos).forEach(([key, value]) => {\n      let t = typeof value;\n      if (t !== \"number\" && t !== \"string\" && !React.isValidElement(value)) {\n        if (!value) {\n          value = (<div></div>);\n        } else {\n          value = (<TwoColumnTable infos={value} />);\n        }\n      }\n      if (key === \"lastUpdated\" ||\n          key === \"lastTick\" ||\n          key === \"startedTime\" ||\n          key === \"useTime\") {\n        value = dayjs(value).format(\"L HH:mm:ss.SSS\");\n      }\n\n      entries.push(<NameCell key={`${key}-name`}>{key}</NameCell>);\n      entries.push(<div key={`${key}-info`}>{value}</div>);\n    });\n\n    return (\n      <GridBox>\n        {entries}\n      </GridBox>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { H5, Elevation, NonIdealState, Tab, Tabs, HTMLSelect, Switch } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nimport { inject, observer } from 'mobx-react';\n\nimport PaddedCard from './PaddedCard';\nimport TwoColumnTable from './TwoColumnTable';\nimport { StreamStoreProps, streamStoreDefaultProps } from '../store/stream';\n\nconst NotInitializedBox = styled.div`\n  height: 200px;\n`;\n\n@inject(\"streamStore\")\n@observer\nexport default class StreamDetails extends Component<StreamStoreProps> {\n  static defaultProps = streamStoreDefaultProps;\n\n  render() {\n    const { streamID, serverID, hexCharacterID, currentMap } = this.props.streamStore;\n    if (!serverID) {\n      return (\n        <PaddedCard elevation={Elevation.THREE}>\n          <NotInitializedBox>\n            <NonIdealState\n              icon=\"database\"\n              title=\"Not yet initialized.\"\n              description=\"The server has not yet been initialized. Please rezone to populate the data.\"\n            />\n          </NotInitializedBox>\n        </PaddedCard>\n      );\n    }\n    const infos = {\n      ServerID: serverID,\n      CharacterID: hexCharacterID,\n      CurrentMap: currentMap,\n    };\n\n    return (\n      <PaddedCard elevation={Elevation.THREE}>\n        <H5>Stream { streamID }</H5>\n        <TwoColumnTable infos={infos} />\n        <Tabs id=\"ViewControls\">\n          <Tab id=\"map\" title=\"Map\" panel={<MapSelectorPanel />} />\n          <Tab id=\"options\" title=\"Options\" panel={<OptionsPanel />} />\n        </Tabs>\n      </PaddedCard>\n    );\n  }\n}\n\n@inject(\"streamStore\")\n@observer\nclass MapSelectorPanel extends Component<StreamStoreProps> {\n  static defaultProps = streamStoreDefaultProps;\n\n  onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    this.props.streamStore.setSelectedMapIndex(Number(e.currentTarget.value));\n  }\n\n  render() {\n    const { place, selectedMapIndex } = this.props.streamStore;\n\n    return (\n      <div>\n        <HTMLSelect onChange={this.onChange} value={selectedMapIndex}>\n          { place.maps.map((m, i) => <option key={i} value={i}>{m.PlaceName}{m.PlaceNameSub && ` - ${m.PlaceNameSub}`}</option>) }\n        </HTMLSelect>\n      </div>\n    );\n  }\n}\n\n@inject(\"streamStore\")\n@observer\nclass OptionsPanel extends Component<StreamStoreProps> {\n  static defaultProps = streamStoreDefaultProps;\n\n  render() {\n    let { options } = this.props.streamStore;\n    return (\n      <div>\n        <Switch\n          checked={options.followSelection}\n          label=\"Follow Selection\"\n          onChange={(e) => this.props.streamStore.setOption(\"followSelection\", e.currentTarget.checked)}\n        />\n        <Switch\n          checked={options.locationInterpolation}\n          label=\"Interpolate Locations\"\n          onChange={(e) => this.props.streamStore.setOption(\"locationInterpolation\", e.currentTarget.checked)}\n        />\n      </div>\n    );\n  }\n}","import styled from 'styled-components';\n\nexport default styled.div`\n  display: inline-block;\n  margin-right: 5px;\n`;","import React, { Component } from 'react';\n\nimport { MenuItem, Classes } from '@blueprintjs/core';\n\nimport { observer } from 'mobx-react';\n\nimport InlineDiv from './InlineDiv';\nimport Entity from '../store/entity';\n\nconst smallClasses = `${Classes.TEXT_SMALL} ${Classes.TEXT_MUTED}`;\n\ninterface EntityListItemProps {\n  entity: Entity;\n  selected: boolean;\n\n  onSelect: (id: number) => void;\n}\n\n@observer\nexport default class EntityListItem extends Component<EntityListItemProps> {\n  onClick = () => {\n    this.props.onSelect(this.props.entity.id);\n  }\n\n  render() {\n    const { entity, selected } = this.props;\n\n    let child = (\n      <div>\n        <div>\n          <InlineDiv>{entity.realName} </InlineDiv>\n          { entity.hasTarget && entity.target &&\n            <InlineDiv className={smallClasses}>>> {entity.target.realName} </InlineDiv>\n          }\n        </div>\n        <div>\n          { entity.hasTarget ? (\n            <InlineDiv className={smallClasses}>({entity.hexID} >> {entity.hexTargetID})</InlineDiv>\n          ) : (\n            <InlineDiv className={smallClasses}>({entity.hexID})</InlineDiv>\n          )}\n          { entity.castingSummary && (\n            <InlineDiv className={smallClasses}>| Casting: {entity.castingSummary}</InlineDiv>\n          )}\n        </div>\n      </div>\n    );\n\n    return (\n      <MenuItem text={child} active={selected} onClick={this.onClick} />\n    );\n  }\n}","import React, { Component } from 'react';\n\nimport { UL, Elevation, InputGroup, Classes, Colors, MenuDivider, H5 } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nimport PaddedCard from './PaddedCard';\nimport EntityListItem from './EntityListItem';\n\nimport { inject, observer } from 'mobx-react';\nimport { StreamStoreProps, streamStoreDefaultProps } from '../store/stream';\n\nconst List = styled(UL)`\n  list-style: none;\n  padding: 0;\n  max-height: 23vh;\n  overflow-y: auto;\n\n  &::-webkit-scrollbar {\n    width: 5px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: ${Colors.GRAY1};\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: ${Colors.DARK_GRAY5};\n  }\n`;\n\nfunction partition<T>(array: T[], predicate: (elem: T) => boolean) {\n  return array.reduce<T[][]>(([pass, fail], elem) => {\n    return predicate(elem) ? [[...pass, elem], fail] : [pass, [...fail, elem]];\n  }, [[], []]);\n}\n\nexport default class EntityListContainer extends Component<{}, { filter: string}> {\n  constructor(props: any) {\n    super(props);\n    this.state = { filter: \"\" };\n  }\n\n  handleFilter = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ filter: e.target.value });\n  }\n\n  render() {\n    return (\n      <PaddedCard elevation={Elevation.THREE}>\n        <H5>Entities</H5>\n        <EntityList filter={this.state.filter} />\n        <InputGroup\n          className={Classes.ROUND}\n          leftIcon=\"search\"\n          placeholder=\"Search...\"\n          onChange={this.handleFilter}\n        />\n      </PaddedCard>\n    );\n  }\n}\n\ninterface EntityListProps extends StreamStoreProps {\n  filter: string;\n}\n\n@inject(\"streamStore\")\n@observer\nclass EntityList extends Component<EntityListProps> {\n  static defaultProps = streamStoreDefaultProps;\n\n  onSelect = (id: number) => {\n    this.props.streamStore.setSelectedEntityID(id);\n  }\n\n  render() {\n    const { entityList, selectedEntity }  = this.props.streamStore;\n    let filteredList = entityList.filter(e => e.realName.includes(this.props.filter));\n    let [npcs, players] = partition(filteredList, (e) => e.isNPC);\n    return (\n      <List>\n        <MenuDivider title=\"Players\" />\n        { players.map(e =>\n          <EntityListItem\n            key={e.id} entity={e}\n            selected={e === selectedEntity}\n            onSelect={this.onSelect}\n          />\n        )}\n        <MenuDivider title=\"NPCs\" />\n        { npcs.map(e =>\n          <EntityListItem\n            key={e.id} entity={e}\n            selected={e === selectedEntity}\n            onSelect={this.onSelect}\n          />\n        )}\n      </List>\n    );\n  }\n}","import React, { Component } from 'react';\n\nimport styled from 'styled-components';\nimport { Classes } from '@blueprintjs/core';\n\nconst ResourceRow = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst ResourceText = styled.div`\n  flex: 1 0 auto;\n  margin-right: 5px;\n`;\n\nconst ResourceBar = styled.div`\n  margin: 5px 0px;\n  flex: 0 0 auto;\n  margin-left: 5px;\n  flex-basis: 120px;\n`;\n\ninterface ResourceValueProps {\n  current: number;\n  max: number;\n  color: string;\n}\n\nexport default class ResourceValue extends Component<ResourceValueProps> {\n  render() {\n    let { current, max, color } = this.props;\n    let ratioPct = (current/max) * 100;\n    if (isNaN(ratioPct)) {\n      ratioPct = 100;\n    }\n    return (\n      <ResourceRow>\n        <ResourceText style={{color: color}}>{current}/{max}</ResourceText>\n        <ResourceBar>\n          <div className={`${Classes.PROGRESS_BAR} ${Classes.PROGRESS_NO_ANIMATION}`}>\n            <div className={Classes.PROGRESS_METER} style={{\n              backgroundColor: color,\n              width: `${ratioPct}%`,\n            }}></div>\n          </div>\n        </ResourceBar>\n      </ResourceRow>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { Colors } from '@blueprintjs/core';\n\nimport { observer } from 'mobx-react';\n\nimport ResourceValue from './ResourceValue';\nimport TwoColumnTable from './TwoColumnTable';\nimport Entity from '../store/entity';\n\ninterface SummaryProps {\n  entity: Entity;\n}\n\n@observer\nexport default class Summary extends Component<SummaryProps> {\n  render() {\n    const { targetString, level, resources, location } = this.props.entity;\n    const infos = {\n      Target: targetString,\n      Level: level,\n      HP: (<ResourceValue current={resources.hp} max={resources.maxHP} color={Colors.FOREST3} />),\n      MP: (<ResourceValue current={resources.mp} max={resources.maxMP} color={Colors.ROSE3} />),\n      TP: (<ResourceValue current={resources.tp} max={1000} color={Colors.GOLD3} />),\n      X: location.x,\n      Y: location.y,\n      Z: location.z,\n      Î¸: `${location.orientation.toFixed(3)} radians CCW from North`,\n    }\n    return (\n      <TwoColumnTable infos={infos} />\n    );\n  }\n}","import * as React from 'react';\nimport { Classes, Tabs as BPTabs, HTMLSelect } from '@blueprintjs/core';\n\nimport InlineDiv from './InlineDiv';\n\nexport default class Tabs extends BPTabs {\n  render() {\n    const { selectedTabId } = this.state;\n    const tabTitles = React.Children.map(this.props.children, this.renderTabTitle);\n\n    const tabPanels = this.getTabChildren()\n      .filter(tab => tab.props.id === selectedTabId)\n      .map(this.renderTabPanel);\n\n    return (\n      <div className={Classes.TABS}>\n        <InlineDiv className={Classes.TEXT_LARGE}>Display:</InlineDiv>\n        <InlineDiv role=\"tablist\">\n          <HTMLSelect onChange={this.onChangeTab} value={selectedTabId}>\n            {tabTitles}\n          </HTMLSelect>\n        </InlineDiv>\n        {tabPanels}\n      </div>\n    );\n  }\n\n  onChangeTab = (e) => {\n    this.handleTabClick(e.currentTarget.value, e);\n  }\n\n  renderTabTitle = (child, i) => {\n    if (!child.props) return child;\n    let {id, title} = child.props;\n    return <option key={i} value={id}>{title}</option>;\n  }\n}","import React, { Component } from 'react';\nimport { Tab } from '@blueprintjs/core';\nimport { observer } from 'mobx-react';\n\nimport TwoColumnTable from './TwoColumnTable';\nimport Tabs from './Tabs';\nimport Entity from '../store/entity';\n\ninterface AdditionalInfoProps {\n  entity: Entity;\n}\n\n@observer\nexport default class AdditionalInfo extends Component<AdditionalInfoProps> {\n  render() {\n    const { entity } = this.props;\n\n    const lastActionTab = (<TabWrapper infoGetter={() => entity.lastAction} />);\n    const castInfoTab = (<TabWrapper infoGetter={() => entity.castingDetails} />);\n    const statusEffectsTab = (<TabWrapper infoGetter={() => entity.statuses} />);\n    const bNPCInfoTab = (<TabWrapper infoGetter={() => entity.bNPCInfo} />);\n    const spawnInfoTab = (<TabWrapper infoGetter={() => entity.rawSpawnData} />);\n\n    return (\n      <Tabs>\n        <Tab id=\"la\" title=\"Last Action\" panel={lastActionTab} />\n        <Tab id=\"castinf\" title=\"Casting Info\" panel={castInfoTab} />\n        <Tab id=\"steff\" title=\"Status Effects\" panel={statusEffectsTab} />\n        <Tab id=\"bnpc\" title=\"BNPC Info\" panel={bNPCInfoTab} />\n        <Tab id=\"spinf\" title=\"Spawn Info\" panel={spawnInfoTab} />\n      </Tabs>\n    );\n  }\n}\n\ninterface TabWrapperProps {\n  infoGetter: () => undefined | null | { [key: string]: any } | Component\n}\n\n@observer\nclass TabWrapper extends Component<TabWrapperProps> {\n  render() {\n    const infos = this.props.infoGetter();\n    if (!infos) {\n      return (<div></div>);\n    }\n    return (<TwoColumnTable infos={infos} />);\n  }\n}","import React, { Component } from 'react';\nimport { H5, Elevation, NonIdealState } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nimport { inject, observer } from 'mobx-react';\n\nimport PaddedCard from './PaddedCard';\nimport Summary from './Summary';\nimport AdditionalInfo from './AdditionalInfo';\nimport { StreamStoreProps, streamStoreDefaultProps } from '../store/stream';\n\nconst Section = styled.div`\n  margin: 10px 0;\n`;\n\nconst NoEntityBox = styled.div`\n  height: 400px;\n`;\n\n@inject(\"streamStore\")\n@observer\nexport default class Details extends Component<StreamStoreProps> {\n  static defaultProps = streamStoreDefaultProps;\n\n  render() {\n    const { selectedEntity } = this.props.streamStore;\n    if (!selectedEntity) {\n      return (\n        <PaddedCard elevation={Elevation.THREE}>\n          <NoEntityBox>\n            <NonIdealState\n              icon=\"person\"\n              title=\"No entity exists\"\n              description=\"The server has not yet been populated with a list of entities. Please wait a moment.\"\n            />\n          </NoEntityBox>\n        </PaddedCard>\n      );\n    }\n    return (\n      <PaddedCard elevation={Elevation.THREE}>\n        <H5>{ selectedEntity.realName } ({ selectedEntity.hexID })</H5>\n        <Section><Summary entity={selectedEntity} /></Section>\n        <Section><AdditionalInfo entity={selectedEntity} /></Section>\n      </PaddedCard>\n    );\n  }\n}","import * as React from 'react';\nimport { H3, Colors } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nimport StreamDetails from './StreamDetails';\nimport EntityList from './EntityList';\nimport Details from './Details';\n\nconst SidePanel = styled.div`\n  flex: 0 0 400px;\n  min-width: 0;\n  height: 100vh;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  &::-webkit-scrollbar {\n    width: 5px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: ${Colors.GRAY1};\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: ${Colors.DARK_GRAY5};\n  }\n`;\n\nconst Title = styled(H3)`\n  padding: 10px;\n  text-align: center;\n`;\n\nexport default class Sidebar extends React.Component {\n  render() {\n    return (\n      <SidePanel>\n        <Title>Inspector</Title>\n        <StreamDetails />\n        <EntityList />\n        <Details />\n      </SidePanel>\n    );\n  }\n}","import * as React from 'react';\nimport { Colors, Divider } from '@blueprintjs/core';\n\nimport styled from 'styled-components';\n\nimport './App.css';\n\nimport Map from './Map';\nimport Sidebar from './Sidebar';\n\nconst AppRoot = styled.div`\n  background-color: ${Colors.DARK_GRAY3};\n`;\n\nconst AppContent = styled.div`\n  display: flex;\n  flex-direction: row;\n\n  min-height: 100vh;\n  height: 100vh;\n  margin: auto;\n`;\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <AppRoot className=\"bp3-dark\">\n        <AppContent>\n          <Map></Map>\n          <Divider/>\n          <Sidebar></Sidebar>\n        </AppContent>\n      </AppRoot>\n    );\n  }\n}","\nimport * as React from 'react';\nimport { Colors, NonIdealState, Spinner  } from '@blueprintjs/core';\n\nimport styled from 'styled-components';\n\nimport './App.css';\n\nconst AppRoot = styled.div`\n  background-color: ${Colors.DARK_GRAY3};\n  min-height: 100vh;\n  height: 100vh;\n  margin: auto;\n`;\n\nexport default class LoadingApp extends React.Component {\n  render() {\n    return (\n      <AppRoot className=\"bp3-dark\">\n        <NonIdealState\n          icon={<Spinner intent=\"primary\" />}\n          title=\"Loading...\"\n        />\n      </AppRoot>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { inject, observer, Provider } from 'mobx-react';\n\nimport streamStore, { PluginParams, StreamStoreProps, streamStoreDefaultProps } from './store/stream';\n\nimport App from './components/App';\nimport LoadingApp from './components/LoadingApp';\n\nimport * as serviceWorker from './serviceWorker';\n\ndeclare global {\n  interface Window {\n    waitForInit?: boolean;\n    initPlugin?: (params: PluginParams) => void;\n  }\n}\n\nconst getPluginParams = async (): Promise<PluginParams> => {\n  if (!window.waitForInit) {\n    return {\n      apiURL: 'http://localhost:8080/query',\n    };\n  } else {\n    return new Promise((resolve) => {\n      window.initPlugin = (params) => {\n        resolve(params);\n      };\n    });\n  }\n};\n\n@inject('streamStore')\n@observer\nclass Main extends Component<StreamStoreProps> {\n  static defaultProps = streamStoreDefaultProps;\n\n  componentDidMount() {\n    getPluginParams().then((params) => {\n      this.props.streamStore.initialize(params);\n    });\n  }\n\n  render() {\n    const { loading } = this.props.streamStore;\n\n    if (loading) return <LoadingApp />;\n    return (<App />);\n  }\n}\n\nconst MainWithState = () => (\n  <Provider {...{ streamStore }}>\n    <Main />\n  </Provider>\n);\n\nReactDOM.render(<MainWithState />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}